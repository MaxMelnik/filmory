/**
 * Animated waiter for Telegraf
 *
 * Usage:
 * await showWaiter(ctx, {
 *   message: `–®—É–∫–∞—é —Ñ—ñ–ª—å–º–∏ —Å—Ö–æ–∂—ñ –Ω–∞ "${movieName}"`,
 *   animation: "dots", // "dots" | "emoji" | "phrases"
 *   delay: 600,
 *   asyncTask: async () => await geminiClient.getRecommendations(movieName),
 *   onDone: (result) => `üé¨ –§—ñ–ª—å–º–∏ —Å—Ö–æ–∂—ñ –Ω–∞ "${movieName}":\n\n${result}`
 * });
 */
export async function showWaiter(ctx, {
    message,
    animation = 'dots',
    delay = 600,
    asyncTask,
    onDone,
}) {
    const animations = {
        dots: ['.', '..', '...', '‚Ä¶'],
        emoji: ['üé¨', 'üçø', 'üéûÔ∏è', 'üé•'],
        phrases: [
            '–ê–Ω–∞–ª—ñ–∑—É—é —Å–º–∞–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...',
            '–ü–µ—Ä–µ–≥–ª—è–¥–∞—é –±–∞–∑—É —Ñ—ñ–ª—å–º—ñ–≤...',
            '–ü—ñ–¥–±–∏—Ä–∞—é —â–æ—Å—å –ø–æ–¥—ñ–±–Ω–µ...',
            '–ó–≥–∞–¥—É—é —Å—Ö–æ–∂—ñ —Å—é–∂–µ—Ç–∏...',
        ],
    };

    const frames = animations[animation] || animations.dots;
    let frameIndex = 0;

    // üü¢ –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const initial = await ctx.reply(`${message} ${frames[frameIndex]}`);

    // üîÅ –ê–Ω—ñ–º–∞—Ü—ñ—è
    const interval = setInterval(async () => {
        frameIndex = (frameIndex + 1) % frames.length;
        let animatedText;

        if (animation === 'phrases') {
            animatedText = frames[frameIndex];
        } else {
            animatedText = `${message} ${frames[frameIndex]}`;
        }

        try {
            await ctx.telegram.editMessageText(
                ctx.chat.id,
                initial.message_id,
                undefined,
                animatedText,
            );
        } catch (e) {
            console.error('‚ö†Ô∏è Animated waiter update error:', e.message);
            clearInterval(interval);
        }
    }, delay);

    try {
        // üß† –í–∏–∫–æ–Ω—É—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –∑–∞–¥–∞—á—É
        const result = await asyncTask();

        // üõë –ó—É–ø–∏–Ω—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
        clearInterval(interval);

        // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        const finalText = typeof onDone === 'function'
            ? onDone(result)
            : `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ:\n\n${result}`;

        await ctx.telegram.editMessageText(
            ctx.chat.id,
            initial.message_id,
            undefined,
            finalText,
        );
    } catch (error) {
        clearInterval(interval);
        console.error('‚ùå Animated waiter failed:', error);

        await ctx.telegram.editMessageText(
            ctx.chat.id,
            initial.message_id,
            undefined,
            '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.',
        );
    }
}
