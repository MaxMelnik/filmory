// backend/src/bot/handlers/start.js
// import User from '../../models/User.js';

export async function handleStart(ctx) {
    try {
        // const telegramId = String(ctx.from.id);
        // let user = await User.findOne({telegramId});
        //
        // if (!user) {
        //     user = await User.create({
        //         telegramId,
        //         username: ctx.from.username,
        //         firstName: ctx.from.first_name,
        //         lastName: ctx.from.last_name,
        //     });
        //     console.log(`[NEW USER] ${user.username || user.telegramId}`);
        // }

        const text = `
üé¨ *–í—ñ—Ç–∞—î–º–æ —É Filmory\\!*

–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à:
‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏, —è–∫—ñ –≤–∂–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤;
‚Ä¢ –î–æ–¥–∞–≤–∞—Ç–∏ —Å—Ç—Ä—ñ—á–∫–∏ –¥–æ ‚Äú–ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø—ñ–∑–Ω—ñ—à–µ‚Äù;
‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó ‚≠ê
    `;

        await ctx.replyWithMarkdownV2(text, {
            reply_markup: {
                inline_keyboard: [
                    [{text: '‚ûï –î–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å–º', callback_data: 'add_film'}],
                    [{text: 'üìã –ú—ñ–π —Å–ø–∏—Å–æ–∫', callback_data: 'show_list'}],
                    [{text: '‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó', callback_data: 'get_recs'}],
                ],
            },
        });
    } catch (err) {
        console.error('‚ùå Error in /start:', err);
        await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É Filmory üò¢');
    }
}
