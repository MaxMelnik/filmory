import dotenv from 'dotenv';
import mongoose from 'mongoose';
import express from 'express';
import bot from './bot/index.js'; // –≥–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –±–æ—Ç–∞

dotenv.config();

const { MONGODB_CONNECT } = process.env;

// === 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö ===
if (!MONGODB_CONNECT) {
    console.error('‚ùå MONGO_URI –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É .env');
    process.exit(1);
}

// === 2. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Mongo ===
mongoose.connect(MONGODB_CONNECT)
    .then(() => console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB'))
    .catch((err) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è MongoDB:', err);
        process.exit(1);
    });

// === 3. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
try {
    await bot.launch();
    console.log('ü§ñ Filmory bot –∑–∞–ø—É—â–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!');
} catch (err) {
    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞:', err);
    process.exit(1);
}

// === 4. –ó–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥–∞ ===
const app = express();
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ—Å—Ç–∏–π health-check –¥–ª—è Render
app.get('/', (req, res) => {
    res.send('üü¢ Filmory bot is alive');
});

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
    console.log(`üåê Web server is running on port ${PORT}`);
});

// === 5. Graceful shutdown ===
process.once('SIGINT', async () => {
    console.log('üõë –ó—É–ø–∏–Ω—è—é Filmory...');
    await bot.stop('SIGINT');
    await mongoose.connection.close();
    process.exit(0);
});

process.once('SIGTERM', async () => {
    console.log('üõë –ó—É–ø–∏–Ω—è—é Filmory...');
    await bot.stop('SIGTERM');
    await mongoose.connection.close();
    process.exit(0);
});
